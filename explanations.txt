Question 1:

While it's possible to consider all permutations of t and see if any one of them is in s, this
approach is inefficient: it will take O(m! * n) where m=len(t) and n=len(s) . My approach is to
break up the strings into lists of characters (t_list and s_list). We then only go through s_list
once: if we get to a character in t, we remove this character from t_list. If after a number of 
such steps t_list has length zero, some order of the letter in t was contained in s and we can 
return True. If we get to a character in s that is not contained in t, we reset t_list to its
original value and effectively start over deleting letters from it. This will have the approximate
efficiency O(n). It is much more targeted to the correct permutation of letters in t than the 
brute force approach, and going through a single list (s_list) is very fast.


Question 2:

A first approach could be to reverse the string so it reads backwards, list all substrings, and
see which of these substrings is the longest one which appears in the original string. The time
for this would be O(n^3), because making all substrings would be O(n^2) and for each one we need
to perform a search O(n). The approach I took searches for all palindromic centers, by going 
through the string only once, and when the previous and the next characters are the same (or we 
have a double), declare this to be the center of a palindrome. For each center, I then find out
how long the palindromic substring is (by growing it in both directions from the center), and
simply keep the longest. This algorithm has runtime O(n), because of the search to find the centers
and because the time it takes to find the length of each palindrome does not grow with n.
My approach treats the string much like a list, rather than a stack or a tree. It is possible 
that turning the string into a binary search tree, our palindromic search to find centers could
be reduced to O(log(n)).


Question 3:

This problem seems similar to the shortest-length problem: from a given vertex, we could look 
for the shortest path is to all the other vertices. However, it may be that this choice of 
connectivity it globally sub-optimal, i.e. that it is only optimal with regards to that particular 
vertex. For example, consider four nodes that are fully connected to each other, laid out in the 
arrangement of a square with two diagonals. The edges along the outer square have weight 1 and 
the diagonals have weight 1.5. The minimum spanning tree has weight 3, achieved by taking three 
of the outer edges of the square. From a given vertex, the shortest length to all other vertices 
involves using the diagonal, giving a spanning tree of length 3.5. The solution I chose makes use
of sets and is similar to hierarchical clustering. We begin with each node belonging to a separate 
"cluster", where the clusters are in the form of sets. We then go through the list of edges, 
ordered by weight. The smallest-weight edge which connects two nodes belonging to different sets 
is chosen as the next edge in the algorithm. We then merge the two sets. We proceed in this way 
until all sets have been merged. The list of the chosen edges specifies a minimum spanning tree.
This algorithm has efficiency O(E) where E is the number of edges in the graph.


Question 4:

In a binary search tree, since all descendants on either side of a node are smaller or larger than 
that node, we are easily able to determine what the least common ancestor of any two nodes is: it 
is the ancestor node whose value lies between the two chosen nodes. If the two chosen nodes are in 
a descendant relationship to each other, e.g. one is the child of the other, then the least common 
ancestor is the node preceding the parent node. To solve this problem we only need to flow down the 
binary search tree, and stop when we find a node that lies between the two chosen nodes or is a 
parent to one of the two nodes. In the best-case scenario, the two chosen nodes lie on opposite 
sides of the root node. In the worse-case scenario, the two nodes are adjacent leaves and we need 
to flow down the entire BST in order to find their least common ancestor. In general, the runtime 
of our algorithm will scale with the the height H of the BST, i.e. will be O(H).


Question 5:

Since linked lists don't have indices we have to traverse all the links in order to find out how 
long the list is. The easiest strategy is to create a LinkedList object which simultaneously 
constructs the linked list alongside an array that keeps track of all its values. Finding the 
value of any element in such an object would be O(1) in time. This would be cheating however, 
since this object strictly speaking isn't a linked list, but is simultaneously a linked list and 
an array. Thus, we need to take our linked list and turn it into an ordinary array which has 
index labels; doing this transformation has efficiency O(n). From there, selecting the mth index 
from the end is an O(1) operation.